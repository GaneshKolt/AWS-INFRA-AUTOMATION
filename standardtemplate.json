{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Inframind Cloudformation Template",
  "Mappings": {
    "Linux2ImageId": {
      "us-east-2": {
        "linux": "ami-02e680c4540db351e",
        "windows": "ami-0170ffc1abff2ebdc"
      },
      "us-east-1": {
        "linux": "ami-009d6802948d06e52",
        "windows": "ami-041114ddee4a98333"
      },
      "us-west-1": {
        "linux": "ami-011b6930a81cd6aaf",
        "windows": "ami-01238fbae24a14ace"
      },
      "us-west-2": {
        "linux": "ami-01bbe152bf19d0289",
        "windows": "ami-019e99815e07ceb49"
      },
      "ap-south-1": {
        "linux": "ami-06bcd1131b2f55803",
        "windows": "ami-07e6b11175e3fa715"
      },
      "ap-northeast-2": {
        "linux": "ami-0b4fdb56a00adb616",
        "windows": "ami-05ec63f885e1c6f2a"
      },
      "ap-southeast-1": {
        "linux": "ami-0b84d2c53ad5250c2",
        "windows": "ami-04385f3f533c85af7"
      },
      "ap-southeast-2": {
        "linux": "ami-08589eca6dcc9b39c",
        "windows": "ami-02e3986f071e14a71"
      },
      "ap-northeast-1": {
        "linux": "ami-0a2de1c3b415889d2",
        "windows": "ami-0f57a86f53aa1c4ea"
      },
      "ca-central-1": {
        "linux": "ami-076b4adb3f90cd384",
        "windows": "ami-0ee0c966a33759216"
      },
      "eu-central-1": {
        "linux": "ami-034fffcc6a0063961",
        "windows": "ami-014b173b0f52c004e"
      },
      "eu-west-1": {
        "linux": "ami-09693313102a30b2c",
        "windows": "ami-0dad95819a9372f76"
      },
      "eu-west-2": {
        "linux": "ami-0274e11dced17bb5b",
        "windows": "ami-06a27ce600d784c71"
      },
      "eu-west-3": {
        "linux": "ami-051707cdba246187b",
        "windows": "ami-0a729892011f4185b"
      },
      "eu-north-1": {
        "linux": "ami-07ec6279",
        "windows": "ami-026aa62df198e6f8a"
      },
      "sa-east-1": {
        "linux": "ami-0112d42866980b373",
        "windows": "ami-0d44cef69e0b580f4"
      }
    }
  },
  "Resources": {
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": ""
      }
    },
    "PublicSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": ""
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway"
    },
    "VPCGatewayAttachment": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "PublicRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "PublicRoute": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "VPCGatewayAttachment",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "PublicSubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnet"
        },
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        }
      }
    },
    "PublicSubnetNetworkAclAssociation": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnet"
        },
        "NetworkAclId": {
          "Fn::GetAtt": [
            "VPC",
            "DefaultNetworkAcl"
          ]
        }
      }
    },
    "InstanceSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable HTTP ingress",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "3389",
            "ToPort": "3389",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "LoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "Listeners": [
          {
            "LoadBalancerPort": "80",
            "InstancePort": "80",
            "Protocol": "HTTP"
          }
        ],
        "HealthCheck": {
          "Target": "HTTP:80/",
          "HealthyThreshold": "3",
          "UnhealthyThreshold": "5",
          "Interval": "90",
          "Timeout": "60"
        },
        "SecurityGroups": [
          {
            "Ref": "PublicLoadBalancerSecurityGroup"
          }
        ],
        "Subnets": [
          {
            "Ref": "PublicSubnet"
          }
        ]
      }
    },
    "PublicLoadBalancerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable HTTP/HTTPS access on port 80/443 to 80/443",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "PrivateSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        },
        "MapPublicIpOnLaunch": false,
        "CidrBlock": ""
      }
    },
    "PrivateSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        },
        "MapPublicIpOnLaunch": false,
        "CidrBlock": ""
      }
    },
    "DBSubnetGroup": {
      "Type": "AWS::RDS::DBSubnetGroup",
      "Properties": {
        "DBSubnetGroupName": "Databse subent group",
        "DBSubnetGroupDescription": "Databse private subnet group",
        "SubnetIds": [
          {
            "Ref": "PrivateSubnet1"
          },
          {
            "Ref": "PrivateSubnet2"
          }
        ]
      }
    },
    "RDSAccessSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Instance to RDS Access",
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "RDSStartFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Description": "RDS start Function",
        "FunctionName": "RDS-Start",
        "Handler": "RdsStart.lambda_handler",
        "VpcConfig": {
          "SecurityGroupIds": [
            {
              "Ref": "RDSAccessSecurityGroup"
            }
          ],
          "SubnetIds": [
            {
              "Ref": "PrivateSubnet1"
            },
            {
              "Ref": "PrivateSubnet2"
            }
          ]
        },
        "Role": {
          "Fn::GetAtt": [
            "LambdaExecutionRole",
            "Arn"
          ]
        },
        "Code": {
          "S3Bucket": "schedulerlambda",
          "S3Key": "RdsStart.zip"
        },
        "Runtime": "python3.6"
      }
    },
    "RDSStopFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Description": "RDS stop Function",
        "FunctionName": "RDS-Stop",
        "Handler": "RdsStop.lambda_handler",
        "VpcConfig": {
          "SecurityGroupIds": [
            {
              "Ref": "RDSAccessSecurityGroup"
            }
          ],
          "SubnetIds": [
            {
              "Ref": "PrivateSubnet1"
            },
            {
              "Ref": "PrivateSubnet2"
            }
          ]
        },
        "Role": {
          "Fn::GetAtt": [
            "LambdaExecutionRole",
            "Arn"
          ]
        },
        "Code": {
          "S3Bucket": "schedulerlambda",
          "S3Key": "RdsStop.zip"
        },
        "Runtime": "python3.6"
      }
    },
    "RDSStopRule": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "CloudWatch event To trigger RDS stop Function",
        "ScheduleExpression": "",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "RDSStopFunction",
                "Arn"
              ]
            },
            "Id": "RDS-Start"
          }
        ]
      }
    },
    "RDSStartRule": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "CloudWatch event To trigger RDS start Function",
        "ScheduleExpression": "",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "RDSStartFunction",
                "Arn"
              ]
            },
            "Id": "RDS-Start"
          }
        ]
      }
    },
    "PermissionForEventsToInvokeRDSStartLambda": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Ref": "RDSStartFunction"
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "RDSStartRule",
            "Arn"
          ]
        }
      }
    },
    "PermissionForEventsToInvokeRDSStopLambda": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Ref": "RDSStopFunction"
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "RDSStopRule",
            "Arn"
          ]
        }
      }
    },
    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "LambdaExecutionRolePolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:*"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "S3:GetObject",
                    "S3:ListBucket"
                  ],
                  "Resource": "arn:aws:s3:::*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:StopInstances",
                    "ec2:StartInstances"
                  ],
                  "Resource": "arn:aws:ec2:*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:CreateNetworkInterface",
                    "ec2:DescribeNetworkInterfaces",
                    "ec2:DeleteNetworkInterface",
                    "ec2:DescribeInstances"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "cloudformation:CreateStack"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "cloudformation:CreateUploadBucket"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "rds:*"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:CreateSnapshot",
                    "ec2:DeleteSnapshot",
                    "ec2:CreateTags",
                    "ec2:DeleteTags",
                    "ec2:ModifySnapshotAttribute"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:AcceptVpcPeeringConnection",
                    "ec2:AcceptVpcEndpointConnections",
                    "ec2:AllocateAddress",
                    "ec2:AssignIpv6Addresses",
                    "ec2:AssignPrivateIpAddresses",
                    "ec2:AssociateAddress",
                    "ec2:AssociateDhcpOptions",
                    "ec2:AssociateRouteTable",
                    "ec2:AssociateSubnetCidrBlock",
                    "ec2:AssociateVpcCidrBlock",
                    "ec2:AttachClassicLinkVpc",
                    "ec2:AttachInternetGateway",
                    "ec2:AttachNetworkInterface",
                    "ec2:AttachVpnGateway",
                    "ec2:AuthorizeSecurityGroupEgress",
                    "ec2:AuthorizeSecurityGroupIngress",
                    "ec2:CreateCustomerGateway",
                    "ec2:CreateDefaultSubnet",
                    "ec2:CreateDefaultVpc",
                    "ec2:CreateDhcpOptions",
                    "ec2:CreateEgressOnlyInternetGateway",
                    "ec2:CreateFlowLogs",
                    "ec2:CreateInternetGateway",
                    "ec2:CreateNatGateway",
                    "ec2:CreateNetworkAcl",
                    "ec2:CreateNetworkAcl",
                    "ec2:CreateNetworkAclEntry",
                    "ec2:CreateNetworkInterface",
                    "ec2:CreateNetworkInterfacePermission",
                    "ec2:CreateRoute",
                    "ec2:CreateRouteTable",
                    "ec2:CreateSecurityGroup",
                    "ec2:CreateSubnet",
                    "ec2:CreateTags",
                    "ec2:CreateVpc",
                    "ec2:CreateVpcEndpoint",
                    "ec2:CreateVpcEndpointConnectionNotification",
                    "ec2:CreateVpcEndpointServiceConfiguration",
                    "ec2:CreateVpcPeeringConnection",
                    "ec2:CreateVpnConnection",
                    "ec2:CreateVpnConnectionRoute",
                    "ec2:CreateVpnGateway",
                    "ec2:DeleteCustomerGateway",
                    "ec2:DeleteDhcpOptions",
                    "ec2:DeleteEgressOnlyInternetGateway",
                    "ec2:DeleteFlowLogs",
                    "ec2:DeleteInternetGateway",
                    "ec2:DeleteNatGateway",
                    "ec2:DeleteNetworkAcl",
                    "ec2:DeleteNetworkAclEntry",
                    "ec2:DeleteNetworkInterface",
                    "ec2:DeleteNetworkInterfacePermission",
                    "ec2:DeleteRoute",
                    "ec2:DeleteRouteTable",
                    "ec2:DeleteSecurityGroup",
                    "ec2:DeleteSubnet",
                    "ec2:DeleteTags",
                    "ec2:DeleteVpc",
                    "ec2:DeleteVpcEndpoints",
                    "ec2:DeleteVpcEndpointConnectionNotifications",
                    "ec2:DeleteVpcEndpointServiceConfigurations",
                    "ec2:DeleteVpcPeeringConnection",
                    "ec2:DeleteVpnConnection",
                    "ec2:DeleteVpnConnectionRoute",
                    "ec2:DeleteVpnGateway",
                    "ec2:DescribeAccountAttributes",
                    "ec2:DescribeAddresses",
                    "ec2:DescribeAvailabilityZones",
                    "ec2:DescribeClassicLinkInstances",
                    "ec2:DescribeCustomerGateways",
                    "ec2:DescribeDhcpOptions",
                    "ec2:DescribeEgressOnlyInternetGateways",
                    "ec2:DescribeFlowLogs",
                    "ec2:DescribeInstances",
                    "ec2:DescribeInternetGateways",
                    "ec2:DescribeKeyPairs",
                    "ec2:DescribeMovingAddresses",
                    "ec2:DescribeNatGateways",
                    "ec2:DescribeNetworkAcls",
                    "ec2:DescribeNetworkInterfaceAttribute",
                    "ec2:DescribeNetworkInterfacePermissions",
                    "ec2:DescribeNetworkInterfaces",
                    "ec2:DescribePrefixLists",
                    "ec2:DescribeRouteTables",
                    "ec2:DescribeSecurityGroupReferences",
                    "ec2:DescribeSecurityGroups",
                    "ec2:DescribeStaleSecurityGroups",
                    "ec2:DescribeSubnets",
                    "ec2:DescribeTags",
                    "ec2:DescribeVpcAttribute",
                    "ec2:DescribeVpcClassicLink",
                    "ec2:DescribeVpcClassicLinkDnsSupport",
                    "ec2:DescribeVpcEndpointConnectionNotifications",
                    "ec2:DescribeVpcEndpointConnections",
                    "ec2:DescribeVpcEndpoints",
                    "ec2:DescribeVpcEndpointServiceConfigurations",
                    "ec2:DescribeVpcEndpointServicePermissions",
                    "ec2:DescribeVpcEndpointServices",
                    "ec2:DescribeVpcPeeringConnections",
                    "ec2:DescribeVpcs",
                    "ec2:DescribeVpnConnections",
                    "ec2:DescribeVpnGateways",
                    "ec2:DetachClassicLinkVpc",
                    "ec2:DetachInternetGateway",
                    "ec2:DetachNetworkInterface",
                    "ec2:DetachVpnGateway",
                    "ec2:DisableVgwRoutePropagation",
                    "ec2:DisableVpcClassicLink",
                    "ec2:DisableVpcClassicLinkDnsSupport",
                    "ec2:DisassociateAddress",
                    "ec2:DisassociateRouteTable",
                    "ec2:DisassociateSubnetCidrBlock",
                    "ec2:DisassociateVpcCidrBlock",
                    "ec2:EnableVgwRoutePropagation",
                    "ec2:EnableVpcClassicLink",
                    "ec2:EnableVpcClassicLinkDnsSupport",
                    "ec2:ModifyNetworkInterfaceAttribute",
                    "ec2:ModifySubnetAttribute",
                    "ec2:ModifyVpcAttribute",
                    "ec2:ModifyVpcEndpoint",
                    "ec2:ModifyVpcEndpointConnectionNotification",
                    "ec2:ModifyVpcEndpointServiceConfiguration",
                    "ec2:ModifyVpcEndpointServicePermissions",
                    "ec2:ModifyVpcPeeringConnectionOptions",
                    "ec2:ModifyVpcTenancy",
                    "ec2:MoveAddressToVpc",
                    "ec2:RejectVpcEndpointConnections",
                    "ec2:RejectVpcPeeringConnection",
                    "ec2:ReleaseAddress",
                    "ec2:ReplaceNetworkAclAssociation",
                    "ec2:ReplaceNetworkAclEntry",
                    "ec2:ReplaceRoute",
                    "ec2:ReplaceRouteTableAssociation",
                    "ec2:ResetNetworkInterfaceAttribute",
                    "ec2:RestoreAddressToClassic",
                    "ec2:RevokeSecurityGroupEgress",
                    "ec2:RevokeSecurityGroupIngress",
                    "ec2:UnassignIpv6Addresses",
                    "ec2:UnassignPrivateIpAddresses",
                    "ec2:UpdateSecurityGroupRuleDescriptionsEgress",
                    "ec2:UpdateSecurityGroupRuleDescriptionsIngress"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "EC2StopFunction": {
        "Type": "AWS::Lambda::Function",
        "Properties": {
            "Description": "EC2 stop Function",
            "FunctionName": "EC2-Stop",
            "Handler": "stop.lambda_handler",
            "VpcConfig": {
                "SecurityGroupIds": [
                    {
                        "Ref": "InstanceSecurityGroup"
                    }
                ],
                "SubnetIds": [
                    {
                        "Ref": "PublicSubnet"
                    }
                ]
            },
            "Role": {
                "Fn::GetAtt": [
                    "LambdaExecutionRole",
                    "Arn"
                ]
            },
            "Code": {
                "S3Bucket": "schedulerlambda",
                "S3Key": "stop.zip"
            },
            "Runtime": "python3.6"
        }
    },
    "EC2StartFunction": {
        "Type": "AWS::Lambda::Function",
        "Properties": {
            "Description": "EC2 start Function",
            "FunctionName": "EC2-Start",
            "Handler": "start.lambda_handler",
            "VpcConfig": {
                "SecurityGroupIds": [
                    {
                        "Ref": "InstanceSecurityGroup"
                    }
                ],
                "SubnetIds": [
                    {
                        "Ref": "PublicSubnet"
                    }
                ]
            },
            "Role": {
                "Fn::GetAtt": [
                    "LambdaExecutionRole",
                    "Arn"
                ]
            },
            "Code": {
                "S3Bucket": "schedulerlambda",
                "S3Key": "start.zip"
            },
            "Runtime": "python3.6"
        }
    },
    "EC2StopRule": {
        "Type": "AWS::Events::Rule",
        "Properties": {
            "Description": "CloudWatch event To trigger EC2 stop Function",
            "ScheduleExpression": "cron(45 8 * * ? *)",
            "State": "ENABLED",
            "Targets": [
                {
                    "Arn": {
                        "Fn::GetAtt": [
                            "EC2StopFunction",
                            "Arn"
                        ]
                    },
                    "Id": "Ec2-Stop"
                }
            ]
        }
    },
    "EC2StartRule": {
        "Type": "AWS::Events::Rule",
        "Properties": {
            "Description": "CloudWatch event To trigger EC2 start Function",
            "ScheduleExpression": "cron(47 8 * * ? *)",
            "State": "ENABLED",
            "Targets": [
                {
                    "Arn": {
                        "Fn::GetAtt": [
                            "EC2StartFunction",
                            "Arn"
                        ]
                    },
                    "Id": "Ec2-Start"
                }
            ]
        }
    },
    "PermissionForEventsToInvokeEC2StopLambda": {
        "Type": "AWS::Lambda::Permission",
        "Properties": {
            "FunctionName": {
                "Ref": "EC2StopFunction"
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "events.amazonaws.com",
            "SourceArn": {
                "Fn::GetAtt": [
                    "EC2StopRule",
                    "Arn"
                ]
            }
        }
    },
    "PermissionForEventsToInvokeEC2StartLambda": {
        "Type": "AWS::Lambda::Permission",
        "Properties": {
            "FunctionName": {
                "Ref": "EC2StartFunction"
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "events.amazonaws.com",
            "SourceArn": {
                "Fn::GetAtt": [
                    "EC2StartRule",
                    "Arn"
                ]
            }
        }
    },
    "SNS": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "Subscription": [
          {
            "Endpoint": "007nishaanth@gmail.com",
            "Protocol": "email"
          }
        ]
      }
    }
  }
}